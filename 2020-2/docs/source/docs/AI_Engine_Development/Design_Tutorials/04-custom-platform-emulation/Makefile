# Â© Copyright 2020 Xilinx, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Makefile input options
TARGET := hw_emu
PFM := tutorial

# File names and locations
GRAPH := aie/graph.cpp
GRAPH_O := libadf.a

KERNEL := s2mm.cpp mm2s.cpp
KERNEL_XO := s2mm.xo mm2s.xo polar_clip.xo
CONFIG_FILE := system.cfg

BASE_PLATFORM := ../../../Vitis_Platform_Creation/Introduction/03_Edge_VCK190/ref_files/step3_pfm/platform_repo/vck190_custom/export/vck190_custom/vck190_custom.xpfm
ROOTFS :=../../../../Vitis_Platform_Creation/Introduction/03_Edge_VCK190/ref_files/step2_petalinux/build/petalinux/images/linux/rootfs.ext4
IMAGE := ../../../../Vitis_Platform_Creation/Introduction/03_Edge_VCK190/ref_files/step2_petalinux/build/petalinux/images/linux/Image
SYSROOT := ${SDKTARGETSYSROOT}

# Command-line options
VPP := v++
AIECC := aiecompiler

AIE_INCLUDE_FLAGS := -include="$(XILINX_VITIS_AIETOOLS)/include" -include="./aie" -include="./data" -include="./aie/kernels" -include="./"
AIE_FLAGS := --target=hw $(AIE_INCLUDE_FLAGS)  -workdir=./Work

VPP_XO_FLAGS := -c --platform $(BASE_PLATFORM) -g --save-temps
VPP_LINK_FLAGS := -l --platform $(BASE_PLATFORM) $(KERNEL_XO) $(GRAPH_O) -t $(TARGET) --save-temps -g --config $(CONFIG_FILE) -o $(PFM).xclbin

GCC_FLAGS := -Wall -c \
			 -std=c++14 \
			 -Wno-int-to-pointer-cast

GCC_INCLUDES := -I$(SYSROOT)/usr/include/xrt \
				-I$(SYSROOT)/usr/include \
				-I./ -I../aie \
				-I${XILINX_VITIS}/aietools/include \
				-I${XILINX_VITIS}/include

GCC_LIB := -ladf_api_xrt -lxrt_coreutil \
		   -L$(SYSROOT)/usr/lib \
		   -L${XILINX_VITIS}/aietools/lib/aarch64.o

.ONESHELL:
.PHONY: clean all kernels aie xclbin host package run_emu

guard-%:
	@#$(${$*}, $(error $* is not set. Run: environment-setup-aarch64-xilinx-linux))

all: kernels aie xclbin host package

######################################################
# This step compiles the HLS C kernels and creates an SDF Graph
# the %.xo is used as the output and creates from the %.cpp files
# The graph is generated by having the -target=hw-link
kernels: $(KERNEL_XO)

%.xo: pl_kernels/%.cpp
	$(VPP) $(VPP_XO_FLAGS) -k $(basename $(notdir $<)) $< -o $@

polar_clip.xo:
	vivado -mode batch -source polar_clip_rtl_kernel.tcl
	cp ip_repo/polar_clip.xo .

aie: $(GRAPH_O)

$(GRAPH_O): $(GRAPH)
	$(AIECC) $(AIE_FLAGS) $(GRAPH)
#####################################################

########################################################
# Once the kernels and graph are generated, you can build
# the new platform. This creates an XSA and the use of
# generetate-platform.sh to build the actual platform
xclbin: $(GRAPH_O) $(KERNEL_XO)
	$(VPP) $(VPP_LINK_FLAGS) || (echo "task: [xclbin] failed error code: $$?"; exit 1)
########################################################

############################################################################################################################
# For hardware and hardware emulation, compile the PS code and generate the main.elf. This is needed for creating the PDI.
host: guard-SYSROOT guard-CXX
	cd ./sw
	$(CXX) $(GCC_FLAGS) $(GCC_INCLUDES) -o aie_control_xrt.o ../Work/ps/c_rts/aie_control_xrt.cpp
	$(CXX) $(GCC_FLAGS) $(GCC_INCLUDES) -o host.o host.cpp
	$(CXX) *.o $(GCC_LIB) -std=c++14 -o host.exe
############################################################################################################################

##################################################################################################
# Depending on the TARGET, it'll either generate the PDI for hw_emu or hw.
package:
ifeq (${TARGET},hw_emu)
	cd ./sw
	v++ -p -t hw_emu \
		-f ../${BASE_PLATFORM} \
		--package.rootfs=${ROOTFS} \
		--package.image_format=ext4 \
		--package.boot_mode=sd \
		--package.kernel_image=${IMAGE} \
		--package.defer_aie_run \
		--package.sd_file host.exe ../tutorial.xclbin ../libadf.a
else
	cd ./sw && \
	v++ -p -t hw \
		-f ../${BASE_PLATFORM} \
		--package.rootfs=${ROOTFS} \
		--package.image_format=ext4 \
		--package.boot_mode=sd \
		--package.kernel_image=${IMAGE} \
		--package.defer_aie_run \
		--package.sd_file host.exe ../tutorial.xclbin ../libadf.a
endif
###################################################################################################

###########################################################################
# If the target is for HW_EMU, launch the emulator
# If the target is for HW, you'll have to follow the Confluence page for
# running on a board farm system.
run_emu:
ifeq (${TARGET},hw_emu)
	cd ./sw
	./launch_hw_emu.sh
else
	@echo "Hardware build, no emulation executed."
endif
###########################################################################

clean:
	rm -rf _x v++* $(KERNEL_XO) $(GRAPH_O) *.o *.compile_summary* *.xpe xnwOut *.xclbin* *.log *.xsa Work *.db *.csv *$(PFM)* *.jou .Xil
	rm -rf sw/*.o sw/*.elf sw/*.xpe sw/xnwOut sw/Work sw/*.csv sw/*.db sw/*.bin sw/*.BIN sw/*.bif sw/launch_hw_emulator.sh sw/*.txt sw/emulation sw/.Xil

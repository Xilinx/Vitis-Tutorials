#  (c) Copyright 2021â€“2022 Xilinx, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.


# Makefile input options
TARGET ?= hw_emu

#Directories
FILES_DIR ?= $(PWD)/../Files
DATA_DIR := $(FILES_DIR)/data
PLATFORM_DIR := ${PLATFORM_REPO_PATHS}
AIE:= $(FILES_DIR)/AIE
AIE2:= $(FILES_DIR)/AIE2
PL:=$(FILES_DIR)/PL
HwLink:=$(FILES_DIR)/HwLink
PS:=$(FILES_DIR)/PS
CONSTRAINTS := $(FILES_DIR)/Constraints

# Platform
BASE_PLATFORM := ${PLATFORM_DIR}/$(PFM_NAME)/$(PFM_NAME).xpfm
PFM := tutorial

XCLBIN := $(PFM).xclbin
XSA    := $(PFM).xsa


# File names and locations
GRAPH := ${AIE}/src/graph.cpp
GRAPH2 := ${AIE2}/src/graph.cpp

GRAPH_O := libadf.a
GRAPH2_O := libadf2.a

KERNEL := s2mm.cpp mm2s.cpp polar_clip.cpp
KERNEL_XO := s2mm.xo mm2s.xo polar_clip.xo
CONFIG_FILE := system.cfg


# Command-line options
VPP := v++
AIECC := aiecompiler

AIE_INCLUDE_FLAGS := -include="$(XILINX_VITIS)/aietools/include" -include="${AIE}/src" -include="${AIE}/data" -include="${AIE}/src/aie_kernels"
AIE_FLAGS := --target=hw $(AIE_INCLUDE_FLAGS) --pl-freq=200
AIE_FLAGS +=  --Xpreproc=-DDATA_DIR=$(DATA_DIR)

VPP_XO_FLAGS := -c --platform $(BASE_PLATFORM) --save-temps -g
VPP_LINK_FLAGS := -l --platform $(BASE_PLATFORM) $(KERNEL_XO) $(GRAPH_O) -t $(TARGET) --save-temps -g --config $(HwLink)/$(CONFIG_FILE) -o $(XSA)


.ONESHELL:
.PHONY: clean all kernels aie aie2 link package package2 run_emu disp


all: kernels aie link aie2 host package2  run_emu
phase1: kernels aie link host package run_emu
phase2: aie2 package2 run_emu

disp:
	echo $(FILES_DIR)

###
# Guarding Checks. Do not modify.
###
check_defined = \
	$(strip $(foreach 1,$1, \
		$(call __check_defined,$1,$(strip $(value 2)))))

__check_defined = \
	$(if $(value $1),, \
		$(error Undefined $1$(if $2, ($2))))

guard-PLATFORM_REPO_PATHS:
	$(call check_defined, PLATFORM_REPO_PATHS, Set your where you downloaded xilinx_vck190_base_202210_1)

guard-ROOTFS:
	$(call check_defined, ROOTFS, Set to: xilinx-versal-common-v2022.1/rootfs.ext4)

guard-IMAGE:
	$(call check_defined, IMAGE, Set to: xilinx-versal-common-v2022.1/Image)

guard-CXX:
	$(call check_defined, CXX, Run: xilinx-versal-common-v2022.1/environment-setup-aarch64-xilinx-linux)

guard-SDKTARGETSYSROOT:
	$(call check_defined, SDKTARGETSYSROOT, Run: xilinx-versal-common-v2022.1/environment-setup-aarch64-xilinx-linux)


########################################################
# This step compiles the AI Engine graph
# to create the file libadf.a

aie: $(GRAPH_O)

aiesim: $(GRAPH_O)
	aiesimulator --pkg-dir=./Work
	make check_aiesim

check_aiesim:
	../check_op 1 $(DATA_DIR)/s2mm_ref.txt aiesimulator_output/data/DataOut1.txt

$(GRAPH_O): $(GRAPH)
	$(AIECC) $(AIE_FLAGS) -workdir=./Work $(GRAPH)
	@echo "COMPLETE: libadf.a created."

aie2: $(GRAPH2_O)

aiesim2: $(GRAPH2_O)
	aiesimulator --pkg-dir=./Work2
	make check_aiesim

$(GRAPH2_O): $(GRAPH2)
	$(AIECC) $(AIE_FLAGS)  --output-archive=$(GRAPH2_O) --workdir=./Work2 --constraints=$(CONSTRAINTS)/AI_interface.aiecst $(GRAPH2)
	@echo "COMPLETE: libadf2.a created."

########################################################



######################################################
# This step compiles the HLS C kernels and creates an ADF Graph
# the %.xo is used as the output and creates from the %.cpp files
# The graph is generated by having the -target=hw
kernels: $(KERNEL_XO)
	@echo "COMPLETE: Kernels Created."

%.xo: ${PL}/src/%.cpp
	$(VPP) $(VPP_XO_FLAGS) -k $(basename $(notdir $<)) $< -o $@
########################################################


########################################################
# Once the kernels and graph are generated, you can build
# the hardware part of the design. This creates an xclbin
# that will be used to run the design on the platform.
link: $(GRAPH_O) $(KERNEL_XO)
	$(VPP) $(VPP_LINK_FLAGS) || (echo "task: [xclbin] failed error code: $$?"; exit 1)
	@echo "COMPLETE: .xclbin created."
########################################################

########################################################
# The host application is then compiledto be used
# either in hw/sw_emu or directly hw

GCC_FLAGS := -Wall -c \
			 -std=c++14 \
			 -Wno-int-to-pointer-cast \
			 --sysroot=${SDKTARGETSYSROOT}

GCC_INCLUDES := -I$(SDKTARGETSYSROOT)/usr/include/xrt \
				-I$(SDKTARGETSYSROOT)/usr/include \
				-I./ -I$(AIE)/src  -I$(PS)/src\
				-I${XILINX_VITIS}/aietools/include \
				-I${XILINX_VITIS}/include

GCC_LIB := -lxaiengine -ladf_api_xrt -lxrt_coreutil \
		   -L$(SDKTARGETSYSROOT)/usr/lib \
		   -L${XILINX_VITIS}/aietools/lib/aarch64.o \
		   --sysroot=${SDKTARGETSYSROOT}

LDCLFLAGS := $(GCC_LIB)


host: guard-CXX guard-SDKTARGETSYSROOT
	$(CXX) $(GCC_FLAGS) $(GCC_INCLUDES) -o aie_control_xrt.o Work/ps/c_rts/aie_control_xrt.cpp
	$(CXX) $(GCC_FLAGS) $(GCC_INCLUDES) -o main.o $(PS)/src/host.cpp
	$(CXX) *.o $(GCC_LIB) -std=c++14 -o host.exe

########################################################

##################################################################################################
# Depending on the TARGET, it'll either generate the PDI for hw_emu or hw.
package: guard-PLATFORM_REPO_PATHS guard-IMAGE guard-ROOTFS
	v++ -p -t ${TARGET} \
		-f ${BASE_PLATFORM} \
		--package.rootfs=${ROOTFS} \
		--package.image_format=ext4 \
		--package.boot_mode=sd \
		--package.kernel_image=${IMAGE} \
		--package.defer_aie_run \
		--package.sd_file host.exe  tutorial.xsa  libadf.a \
		--package.sd_file ${FILES_DIR}/embedded_exec.sh

package2: guard-PLATFORM_REPO_PATHS guard-IMAGE guard-ROOTFS
	v++ -p -t ${TARGET} \
		-f ${BASE_PLATFORM} \
		--package.rootfs=${ROOTFS} \
		--package.image_format=ext4 \
		--package.boot_mode=sd \
		--package.kernel_image=${IMAGE} \
		--package.defer_aie_run \
		--package.sd_file host.exe  tutorial.xsa  libadf2.a \
		--package.sd_file ${FILES_DIR}/embedded_exec.sh

########################################################

##################################################################################################
# Runs Hw emulation
run_emu:
	./launch_hw_emu.sh

########################################################




clean:
	rm -rf _x v++* $(KERNEL_XO) $(GRAPH_O) $(GRAPH2_O) *.o *.compile_summary* *.xpe xnwOut *.xclbin* *.log *.xsa
	rm -rf Work Work2 *.db *.csv *$(PFM)* *.jou .Xil .AIE_SIM_CMD_LINE_OPTIONS
	rm -rf aiesimulator_output pl_sample*
	rm -rf *.bin *.BIN cfg emu_qemu_scripts launch* *.txt *.sh
	rm -rf sd_card aiesim *.wcfg *.wdb *.bif *.exe *.img  sim temp

diff -Naur Vitis_Accel_Examples_o/cpp_kernels/simple_vadd/makefile_versal_ps.mk Vitis_Accel_Examples/cpp_kernels/simple_vadd/makefile_versal_ps.mk
--- Vitis_Accel_Examples_o/cpp_kernels/simple_vadd/makefile_versal_ps.mk	2022-08-18 12:47:06.455641227 -0400
+++ Vitis_Accel_Examples/cpp_kernels/simple_vadd/makefile_versal_ps.mk	2022-08-18 12:47:52.331640515 -0400
@@ -71,7 +71,7 @@
 SD_CARD := $(PACKAGE_OUT)
 vck190_dfx_hw := false
 
-CXXFLAGS += -I$(SYSROOT)/usr/include/xrt -I$(XILINX_VIVADO)/include -Wall -O0 -g -std=c++1y
+CXXFLAGS += -I$(SYSROOT)/usr/include/xrt -I$(XILINX_VIVADO)/include -Wall -O0 -g -std=c++1y -I$(XILINX_HLS)/include
 LDFLAGS += -L$(SYSROOT)/usr/lib -pthread -lxilinxopencl
 
 ########################## Checking if PLATFORM in allowlist #######################
@@ -85,7 +85,7 @@
 LDFLAGS += --sysroot=$(SYSROOT)
 ############################## Setting up Kernel Variables ##############################
 # Kernel compiler global settings
-VPP_FLAGS += -t $(TARGET) --platform $(PLATFORM) --save-temps 
+VPP_FLAGS += -t $(TARGET) --platform $(PLATFORM) --save-temps --config ../../../system.cfg
 
 
 EXECUTABLE = ./simple_vadd
diff -Naur Vitis_Accel_Examples_o/cpp_kernels/simple_vadd/src/krnl_vadd.cpp Vitis_Accel_Examples/cpp_kernels/simple_vadd/src/krnl_vadd.cpp
--- Vitis_Accel_Examples_o/cpp_kernels/simple_vadd/src/krnl_vadd.cpp	2022-08-18 12:47:06.455641227 -0400
+++ Vitis_Accel_Examples/cpp_kernels/simple_vadd/src/krnl_vadd.cpp	2022-08-18 11:12:22.039729434 -0400
@@ -50,7 +50,8 @@
                                       |______________|-----> Output result to Global Memory
 
 *******************************************************************************/
-
+#include "ap_int.h"
+#include "ap_axi_sdata.h"
 // Includes
 #include <stdint.h>
 #include <hls_stream.h>
@@ -88,6 +89,16 @@
         out[i] = out_stream.read();
     }
 }
+typedef ap_axis<15, 0, 0, 0> pkt;
+
+static void dss_process( int *wave, hls::stream<pkt> &s_in) {
+    for (int i = 0; i < 1024; i++) 
+    {
+        #pragma HLS PIPELINE II = 1
+        pkt value = s_in.read();
+        wave[i] = value.data;
+    }
+}
 
 extern "C" {
 
@@ -101,10 +112,13 @@
         size (input)  --> Number of elements in vector
 */
 
-void krnl_vadd(uint32_t* in1, uint32_t* in2, uint32_t* out, int size) {
+//void krnl_vadd(uint32_t* in1, uint32_t* in2, uint32_t* out, int size) {
+void krnl_vadd(uint32_t* in1, uint32_t* in2, uint32_t* out, int size, int *wave_out, hls::stream<pkt> &dds_in) {
 #pragma HLS INTERFACE m_axi port = in1 bundle = gmem0
 #pragma HLS INTERFACE m_axi port = in2 bundle = gmem1
 #pragma HLS INTERFACE m_axi port = out bundle = gmem0
+#pragma HLS INTERFACE m_axi port = wave_out bundle = gmem2
+#pragma HLS INTERFACE axis port = dds_in
 
     static hls::stream<uint32_t> in1_stream("input_stream_1");
     static hls::stream<uint32_t> in2_stream("input_stream_2");
@@ -116,5 +130,8 @@
     load_input(in2, in2_stream, size);
     compute_add(in1_stream, in2_stream, out_stream, size);
     store_result(out, out_stream, size);
+    dss_process(wave_out,dds_in);
 }
+ 
+
 }
diff -Naur Vitis_Accel_Examples_o/cpp_kernels/simple_vadd/src/vadd.cpp Vitis_Accel_Examples/cpp_kernels/simple_vadd/src/vadd.cpp
--- Vitis_Accel_Examples_o/cpp_kernels/simple_vadd/src/vadd.cpp	2022-08-18 12:47:06.455641227 -0400
+++ Vitis_Accel_Examples/cpp_kernels/simple_vadd/src/vadd.cpp	2022-08-18 11:13:56.503727968 -0400
@@ -1,18 +1,46 @@
-/**
-* Copyright (C) 2019-2021 Xilinx, Inc
-*
-* Licensed under the Apache License, Version 2.0 (the "License"). You may
-* not use this file except in compliance with the License. A copy of the
-* License is located at
-*
-*     http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-* License for the specific language governing permissions and limitations
-* under the License.
-*/
+/*******************************************************************************
+Vendor: Xilinx
+Associated Filename: vadd.cpp
+Purpose: VITIS vector addition
+
+*******************************************************************************
+Copyright (C) 2019 XILINX, Inc.
+
+This file contains confidential and proprietary information of Xilinx, Inc. and
+is protected under U.S. and international copyright and other intellectual
+property laws.
+
+DISCLAIMER
+This disclaimer is not a license and does not grant any rights to the materials
+distributed herewith. Except as otherwise provided in a valid license issued to
+you by Xilinx, and to the maximum extent permitted by applicable law:
+(1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND WITH ALL FAULTS, AND XILINX
+HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY,
+INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT, OR
+FITNESS FOR ANY PARTICULAR PURPOSE; and (2) Xilinx shall not be liable (whether
+in contract or tort, including negligence, or under any other theory of
+liability) for any loss or damage of any kind or nature related to, arising under
+or in connection with these materials, including for any direct, or any indirect,
+special, incidental, or consequential loss or damage (including loss of data,
+profits, goodwill, or any type of loss or damage suffered as a result of any
+action brought by a third party) even if such damage or loss was reasonably
+foreseeable or Xilinx had been advised of the possibility of the same.
+
+CRITICAL APPLICATIONS
+Xilinx products are not designed or intended to be fail-safe, or for use in any
+application requiring fail-safe performance, such as life-support or safety
+devices or systems, Class III medical devices, nuclear facilities, applications
+related to the deployment of airbags, or any other applications that could lead
+to death, personal injury, or severe property or environmental damage
+(individually and collectively, "Critical Applications"). Customer assumes the
+sole risk and liability of any use of Xilinx products in Critical Applications,
+subject only to applicable laws and regulations governing limitations on product
+liability.
+
+THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS PART OF THIS FILE AT
+ALL TIMES.
+
+*******************************************************************************/
 
 #define OCL_CHECK(error, call)                                                                   \
     call;                                                                                        \
@@ -25,7 +53,8 @@
 #include <fstream>
 #include <iostream>
 #include <stdlib.h>
-
+#include "ap_int.h"
+#include <stdio.h>
 static const int DATA_SIZE = 4096;
 
 static const std::string error_message =
@@ -121,14 +150,14 @@
     OCL_CHECK(err, cl::Buffer buffer_a(context, CL_MEM_READ_ONLY, size_in_bytes, NULL, &err));
     OCL_CHECK(err, cl::Buffer buffer_b(context, CL_MEM_READ_ONLY, size_in_bytes, NULL, &err));
     OCL_CHECK(err, cl::Buffer buffer_result(context, CL_MEM_WRITE_ONLY, size_in_bytes, NULL, &err));
-
+    cl::Buffer buffer_waveout(context, CL_MEM_WRITE_ONLY, 1024*sizeof(int));
     // set the kernel Arguments
     int narg = 0;
     OCL_CHECK(err, err = krnl_vector_add.setArg(narg++, buffer_a));
     OCL_CHECK(err, err = krnl_vector_add.setArg(narg++, buffer_b));
     OCL_CHECK(err, err = krnl_vector_add.setArg(narg++, buffer_result));
     OCL_CHECK(err, err = krnl_vector_add.setArg(narg++, DATA_SIZE));
-
+    krnl_vector_add.setArg(narg++,buffer_waveout);
     // We then need to map our OpenCL buffers to get the pointers
     int* ptr_a;
     int* ptr_b;
@@ -139,12 +168,7 @@
               ptr_b = (int*)q.enqueueMapBuffer(buffer_b, CL_TRUE, CL_MAP_WRITE, 0, size_in_bytes, NULL, NULL, &err));
     OCL_CHECK(err, ptr_result = (int*)q.enqueueMapBuffer(buffer_result, CL_TRUE, CL_MAP_READ, 0, size_in_bytes, NULL,
                                                          NULL, &err));
-
-    // Initialize the vectors used in the test
-    for (int i = 0; i < DATA_SIZE; i++) {
-        ptr_a[i] = rand() % DATA_SIZE;
-        ptr_b[i] = rand() % DATA_SIZE;
-    }
+    int *ptr_waveout = (int *) q.enqueueMapBuffer (buffer_waveout , CL_TRUE , CL_MAP_READ , 0, 1024*sizeof(int));
 
     // Data will be migrated to kernel space
     OCL_CHECK(err, err = q.enqueueMigrateMemObjects({buffer_a, buffer_b}, 0 /* 0 means from host*/));
@@ -156,7 +180,7 @@
     // order to view the results. This call will transfer the data from FPGA to
     // source_results vector
     OCL_CHECK(err, q.enqueueMigrateMemObjects({buffer_result}, CL_MIGRATE_MEM_OBJECT_HOST));
-
+    q.enqueueMigrateMemObjects({buffer_waveout},CL_MIGRATE_MEM_OBJECT_HOST);
     OCL_CHECK(err, q.finish());
 
     // Verify the result
@@ -169,12 +193,19 @@
             break;
         }
     }
+    FILE *fp_dout;
+     fp_dout=fopen("wave_out.txt","w");
 
+     for (int i = 0; i < 1024; i++) {
+       fprintf(fp_dout,"%d\n",ptr_waveout[i]<<17);
+     }
+
+     fclose(fp_dout);
     OCL_CHECK(err, err = q.enqueueUnmapMemObject(buffer_a, ptr_a));
     OCL_CHECK(err, err = q.enqueueUnmapMemObject(buffer_b, ptr_b));
     OCL_CHECK(err, err = q.enqueueUnmapMemObject(buffer_result, ptr_result));
     OCL_CHECK(err, err = q.finish());
-
+    q.enqueueUnmapMemObject(buffer_waveout , ptr_waveout);
     std::cout << "TEST " << (match ? "FAILED" : "PASSED") << std::endl;
     return (match ? EXIT_FAILURE : EXIT_SUCCESS);
 }

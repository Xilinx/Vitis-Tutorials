//
// Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
// SPDX-License-Identifier: MIT
//
// Author: Mark Rollins

#pragma once

#include <adf.h>
#include <aie_api/aie.hpp>

using namespace adf;

template< unsigned NSTREAM, unsigned PHASE>
class ifft256p4_rot {
public:
  typedef cint32 TT_DATA;
  typedef cint16 TT_TWID;
  static constexpr unsigned  NFFT_1D = 256;
  static constexpr unsigned     NFFT = NFFT_1D * NFFT_1D;
  static constexpr unsigned    EXTRA = 4;
  static constexpr unsigned    NSAMP = NFFT_1D + EXTRA;
  static constexpr bool      INVERSE = true;
  static constexpr unsigned SHIFT_TW = 15;
  static constexpr unsigned SHIFT_DT = 15;

  // Twiddle factor argument:
  // exp(+1i*2*pi*r*c/NFFT) --> 2*pi*r*c/NFFT = pi*r*c/(2^15)
  // aie::sincos(arg) is normalized by 1/pi and 'arg' is provided in Q1.31 format.
  // --> we need to shift by (31-15) = 16 in order to normalize phase step "r" by 2^15
  static constexpr unsigned ALIGN = 16;

  // Count off the rows:
  unsigned COUNT;

private:

  // Temporary Buffers:
  alignas(2*aie::vector_decl_align) TT_DATA (&tbuff)[NFFT_1D];

  // Twiddle factors:
  alignas(aie::vector_decl_align) static constexpr TT_TWID    tw1[1] = {{ 32767,      0}};
  alignas(aie::vector_decl_align) static constexpr TT_TWID    tw2[2] = {{ 32767,      0}, {     0, -32768}};
  alignas(aie::vector_decl_align) static constexpr TT_TWID    tw4[4] = {{ 32767,      0}, { 23170, -23170}, {     0, -32768}, {-23170, -23170}};
  alignas(aie::vector_decl_align) static constexpr TT_TWID    tw8[8] = {{ 32767,      0}, { 30274, -12540}, { 23170, -23170}, { 12540, -30274},
                                                                        {     0, -32768}, {-12540, -30274}, {-23170, -23170}, {-30274, -12540}};
  alignas(aie::vector_decl_align) static constexpr TT_TWID   tw16[16] = {{ 32767,      0}, { 32138,  -6393}, { 30274, -12540}, { 27246, -18205},
                                                                         { 23170, -23170}, { 18205, -27246}, { 12540, -30274}, {  6393, -32138},
                                                                         {     0, -32768}, { -6393, -32138}, {-12540, -30274}, {-18205, -27246},
                                                                         {-23170, -23170}, {-27246, -18205}, {-30274, -12540}, {-32138,  -6393}};
  alignas(aie::vector_decl_align) static constexpr TT_TWID   tw32[32] =  {{32767, 0},       {32610, -3212},   {32138, -6393},   {31357, -9512},   {30274, -12540},  {28899, -15447},
                                                                          {27246, -18205},  {25330, -20788},  {23170, -23170},  {20788, -25330},  {18205, -27246},  {15447, -28899},
                                                                          {12540, -30274},  {9512, -31357},   {6393, -32138},   {3212, -32610},   {0, -32768},      {-3212, -32610},
                                                                          {-6393, -32138},  {-9512, -31357},  {-12540, -30274}, {-15447, -28899}, {-18205, -27246}, {-20788, -25330},
                                                                          {-23170, -23170}, {-25330, -20788}, {-27246, -18205}, {-28899, -15447}, {-30274, -12540}, {-31357, -9512},
                                                                          {-32138, -6393},  {-32610, -3212}};
  alignas(aie::vector_decl_align) static constexpr TT_TWID   tw64[64] =  {{32767, 0},       {32729, -1608},   {32610, -3212},   {32413, -4808},   {32138, -6393},   {31786, -7962},
                                                                          {31357, -9512},   {30853, -11039},  {30274, -12540},  {29622, -14010},  {28899, -15447},  {28106, -16846},
                                                                          {27246, -18205},  {26320, -19520},  {25330, -20788},  {24279, -22006},  {23170, -23170},  {22006, -24279},
                                                                          {20788, -25330},  {19520, -26320},  {18205, -27246},  {16846, -28106},  {15447, -28899},  {14010, -29622},
                                                                          {12540, -30274},  {11039, -30853},  {9512, -31357},   {7962, -31786},   {6393, -32138},   {4808, -32413},
                                                                          {3212, -32610},   {1608, -32729},   {0, -32768},      {-1608, -32729},  {-3212, -32610},  {-4808, -32413},
                                                                          {-6393, -32138},  {-7962, -31786},  {-9512, -31357},  {-11039, -30853}, {-12540, -30274}, {-14010, -29622},
                                                                          {-15447, -28899}, {-16846, -28106}, {-18205, -27246}, {-19520, -26320}, {-20788, -25330}, {-22006, -24279},
                                                                          {-23170, -23170}, {-24279, -22006}, {-25330, -20788}, {-26320, -19520}, {-27246, -18205}, {-28106, -16846},
                                                                          {-28899, -15447}, {-29622, -14010}, {-30274, -12540}, {-30853, -11039}, {-31357, -9512},  {-31786, -7962},
                                                                          {-32138, -6393},  {-32413, -4808},  {-32610, -3212},  {-32729, -1608}};
  alignas(aie::vector_decl_align) static constexpr TT_TWID  tw128[128] = {{32767, 0},       {32758, -804},    {32729, -1608},   {32679, -2411},   {32610, -3212},   {32522, -4011},
                                                                          {32413, -4808},   {32286, -5602},   {32138, -6393},   {31972, -7180},   {31786, -7962},   {31581, -8740},
                                                                          {31357, -9512},   {31114, -10279},  {30853, -11039},  {30572, -11793},  {30274, -12540},  {29957, -13279},
                                                                          {29622, -14010},  {29269, -14733},  {28899, -15447},  {28511, -16151},  {28106, -16846},  {27684, -17531},
                                                                          {27246, -18205},  {26791, -18868},  {26320, -19520},  {25833, -20160},  {25330, -20788},  {24812, -21403},
                                                                          {24279, -22006},  {23732, -22595},  {23170, -23170},  {22595, -23732},  {22006, -24279},  {21403, -24812},
                                                                          {20788, -25330},  {20160, -25833},  {19520, -26320},  {18868, -26791},  {18205, -27246},  {17531, -27684},
                                                                          {16846, -28106},  {16151, -28511},  {15447, -28899},  {14733, -29269},  {14010, -29622},  {13279, -29957},
                                                                          {12540, -30274},  {11793, -30572},  {11039, -30853},  {10279, -31114},  {9512, -31357},   {8740, -31581},
                                                                          {7962, -31786},   {7180, -31972},   {6393, -32138},   {5602, -32286},   {4808, -32413},   {4011, -32522},
                                                                          {3212, -32610},   {2411, -32679},   {1608, -32729},   {804, -32758},    {0, -32768},      {-804, -32758},
                                                                          {-1608, -32729},  {-2411, -32679},  {-3212, -32610},  {-4011, -32522},  {-4808, -32413},  {-5602, -32286},
                                                                          {-6393, -32138},  {-7180, -31972},  {-7962, -31786},  {-8740, -31581},  {-9512, -31357},  {-10279, -31114},
                                                                          {-11039, -30853}, {-11793, -30572}, {-12540, -30274}, {-13279, -29957}, {-14010, -29622}, {-14733, -29269},
                                                                          {-15447, -28899}, {-16151, -28511}, {-16846, -28106}, {-17531, -27684}, {-18205, -27246}, {-18868, -26791},
                                                                          {-19520, -26320}, {-20160, -25833}, {-20788, -25330}, {-21403, -24812}, {-22006, -24279}, {-22595, -23732},
                                                                          {-23170, -23170}, {-23732, -22595}, {-24279, -22006}, {-24812, -21403}, {-25330, -20788}, {-25833, -20160},
                                                                          {-26320, -19520}, {-26791, -18868}, {-27246, -18205}, {-27684, -17531}, {-28106, -16846}, {-28511, -16151},
                                                                          {-28899, -15447}, {-29269, -14733}, {-29622, -14010}, {-29957, -13279}, {-30274, -12540}, {-30572, -11793},
                                                                          {-30853, -11039}, {-31114, -10279}, {-31357, -9512},  {-31581, -8740},  {-31786, -7962},  {-31972, -7180},
                                                                          {-32138, -6393},  {-32286, -5602},  {-32413, -4808},  {-32522, -4011},  {-32610, -3212},  {-32679, -2411},
                                                                          {-32729, -1608},  {-32758, -804}};

public:
  // Constructor:
  ifft256p4_rot( TT_DATA (&tbuff_i)[NFFT_1D] );

  // Run:
  void run(  input_buffer<TT_DATA,extents<NSAMP> >& __restrict sig_i,
            output_buffer<TT_DATA,extents<NSAMP> >& __restrict sig_o );

  static void registerKernelClass( void )
  {
    REGISTER_FUNCTION( ifft256p4_rot::run );
    REGISTER_PARAMETER( tbuff );
  }
};

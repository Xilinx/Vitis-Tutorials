XF_PROJ_ROOT ?= $(shell bash -c 'export MK_PATH=$(MK_PATH); echo $${MK_PATH%/AI_Engine_Development/*}')

ROOTFS ?= ${PLATFORM_REPO_PATHS}/sw/versal/xilinx-versal-common-v2022.1/rootfs.ext4
IMAGE ?= ${PLATFORM_REPO_PATHS}/sw/versal/xilinx-versal-common-v2022.1/Image
SDKTARGETSYSROOT ?= ${SYSROOT}

# Makefile input options
TARGET := sw_emu
PFM := tutorial
EMU_CMD := ./host_ps_on_x86 a.xclbin

# File names and locations
GRAPH := aie/graph.cpp
GRAPH_O := libadf.a

KERNEL := s2mm.cpp mm2s.cpp
KERNEL_XO := s2mm.xo mm2s.xo
CONFIG_FILE := system.cfg
EMCONFIG_FILE = emconfig.json

EXECUTABLE = ./host_ps_on_x86
PACKAGE_OUT = ./package.$(TARGET)

BASE_PLATFORM := ${PLATFORM_REPO_PATHS}/xilinx_vck190_base_202210_1/xilinx_vck190_base_202210_1.xpfm

# Command-line options
VPP := v++
AIECC := aiecompiler

AIE_INCLUDE_FLAGS := -include="$(XILINX_VITIS)/aietools/include" -include="./aie" -include="./data" -include="./aie/kernels" -include="./"
AIE_FLAGS := --target=x86sim $(AIE_INCLUDE_FLAGS) --platform $(BASE_PLATFORM) -workdir=./Work 

VPP_XO_FLAGS := -c --platform $(BASE_PLATFORM) -t $(TARGET) --save-temps -g
VPP_LINK_FLAGS := -l --platform $(BASE_PLATFORM) $(KERNEL_XO) $(GRAPH_O) -t $(TARGET) --save-temps -g --config $(CONFIG_FILE) -o $(PFM).xsa
VPP_FLAGS := $(VPP_LINK_FLAGS)
LDCLFLAGS :=

GCC_FLAGS := -Wall -c \
	     -std=c++14 \
	     -D__SYNCBO_ENABLE__ -D__PS_ENABLE_AIE__ \
	     -Wno-int-to-pointer-cast \
	     -I${XILINX_XRT}/include
GCC_INCLUDES := -I./ -I../aie \
		-I${XILINX_VITIS}/aietools/include \

GCC_LIB :=  -ladf_api_xrt_swemu -lxrt_coreutil \
	    -L${XILINX_VITIS}/aietools/lib/lnx64.o \
	    -L${XILINX_XRT}/lib
		   

LDCLFLAGS := $(GCC_LIB)

.ONESHELL:
.PHONY: clean all kernels x86sim xsa host package run_emu

###
# Guarding Checks. Do not modify.
###
check_defined = \
	$(strip $(foreach 1,$1, \
		$(call __check_defined,$1,$(strip $(value 2)))))

__check_defined = \
	$(if $(value $1),, \
		$(error Undefined $1$(if $2, ($2))))

guard-PLATFORM_REPO_PATHS:
	$(call check_defined, PLATFORM_REPO_PATHS, Set your where you downloaded xilinx_vck190_base_202210_1)

guard-ROOTFS:
	$(call check_defined, ROOTFS, Set to: xilinx-versal-common-v2022.1/rootfs.ext4)

guard-IMAGE:
	$(call check_defined, IMAGE, Set to: xilinx-versal-common-v2022.1/Image)

guard-CXX:
	$(call check_defined, CXX, Run: xilinx-versal-common-v2022.1/environment-setup-aarch64-xilinx-linux)

guard-SDKTARGETSYSROOT:
	$(call check_defined, SDKTARGETSYSROOT, Run: xilinx-versal-common-v2022.1/environment-setup-aarch64-xilinx-linux)

###

all: kernels aie x86sim xsa host package
sd_card: all

######################################################
# This step compiles the HLS C kernels and creates an ADF Graph
# the %.xo is used as the output and creates from the %.cpp files
# The graph is generated by having the -target=hw
kernels: guard-PLATFORM_REPO_PATHS $(KERNEL_XO)
	@echo "COMPLETE: Kernels Created."	

%.xo: pl_kernels/%.cpp
	$(VPP) $(VPP_XO_FLAGS) -k $(basename $(notdir $<)) $< -o $@

aie: $(GRAPH_O)

x86sim: $(GRAPH_O)
	x86simulator --pkg-dir=./Work 

$(GRAPH_O): $(GRAPH)
	$(AIECC) $(AIE_FLAGS) $(GRAPH)
	@echo "COMPLETE: libadf.a created."
#####################################################

########################################################
# Once the kernels and graph are generated, you can build
# the hardware part of the design. This creates an xsa
# that will be used to run the design on the platform.
xsa: guard-PLATFORM_REPO_PATHS $(GRAPH_O) $(KERNEL_XO)
	$(VPP) $(VPP_LINK_FLAGS) || (echo "task: [xsa] failed error code: $$?"; exit 1)
	@echo "COMPLETE: .xsa created."
########################################################

############################################################################################################################
# For Software Emulation, compile the PS code and generate the host.exe. 
host: guard-CXX guard-SDKTARGETSYSROOT 
	cd ./sw 
	$(CXX) $(GCC_FLAGS) $(GCC_INCLUDES) -o aie_control_xrt.o ../Work/ps/c_rts/aie_control_xrt.cpp
	$(CXX) $(GCC_FLAGS) $(GCC_INCLUDES) -o host.o host.cpp
	$(CXX) *.o $(GCC_LIB) -o $(EXECUTABLE) 
	@echo "COMPLETE: Host application created."
############################################################################################################################

##################################################################################################
# This command packages the .xsa, libadf.a, package.sw_emu.
package: guard-PLATFORM_REPO_PATHS guard-IMAGE guard-ROOTFS
	cd ./sw
	emconfigutil --platform $(BASE_PLATFORM) --nd 1;\
	v++ -p -t ${TARGET} \
		--package.defer_aie_run \
		--platform ${BASE_PLATFORM} \
		--package.sd_dir $(PLATFORM_REPO_PATHS)/sw/versal/xrt \
		--package.out_dir $(PACKAGE_OUT) \
		--package.ps_on_x86 \
		--package.sd_file $(EMCONFIG_FILE) \
		../$(PFM).xsa ../$(GRAPH_O)
	
	@echo "COMPLETE: sw_emu package created."

###################################################################################################

#Build the design and then run hardware emulation 
run: all run_emu

###########################################################################
# Launch software emulator
run_emu: 
ifeq (${TARGET},sw_emu)
	cd ./sw
	$(EMU_CMD)
else
	@echo "Hardware build, no emulation executed."
endif

###########################################################################

clean:
	rm -rf _x v++* $(KERNEL_XO) $(GRAPH_O) *.o *.compile_summary* *.xpe xnwOut *.xclbin* *.log *.xsa Work *.db *.csv *$(PFM)* *.jou .Xil
	rm -rf sw/*.log sw/*.xclbin sw/cfg/ sw/launch_hw_emu.sh sw/qemu_dts_files sw/emu_qemu_scripts sw/*.exe sw/_x/ sw/*summary sw/*.o sw/*.elf sw/*.xpe sw/xnwOut sw/Work sw/*.csv sw/*.db sw/*.bin sw/*.BIN sw/*.bif sw/launch_hw_emulator.sh sw/*.txt sw/emulation sw/.Xil
	rm -rf sw/sd_card sw/sd_card.img sw/package.sw_emu sw/host_ps_on_x86 sw/*.o sw/*.exe sw/qemu* x86simulator_output

clean_for_x86:
	rm -rf sw/*.log sw/*.xclbin sw/cfg/ sw/launch_hw_emu.sh sw/qemu_dts_files sw/emu_qemu_scripts sw/*.exe sw/_x/ sw/*summary sw/*.o sw/*.elf sw/*.xpe sw/xnwOut sw/Work sw/*.csv sw/*.db sw/*.bin sw/*.BIN sw/*.bif sw/launch_hw_emulator.sh sw/*.txt sw/emulation sw/.Xil
	rm -rf sw/sd_card sw/sd_card.img sw/*.o sw/*.exe sw/qemu*
